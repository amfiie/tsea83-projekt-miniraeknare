	MOVI r1 1
	MOVI r2 2
	MOVI r9 10
	MOVI r12 10		
	MOVI r11 12
	ADD r11 r12 
LOOP_1:
	CMP r12 r11 
	JMPGE SORTING_EXIT
	NOP
	LOAD r14 r12
	MOV r13 r12
	SUB r13 r1 
LOOP_2:
	CMP r13 r9 
	JMPN LOOP_2_EXIT
	NOP
	LOAD r10 r13
	CMP r10 r14
	JMPN LOOP_2_EXIT
	NOP
	MOV r8 r10
	ADDI r13 1
	STORE r8 r13
	SUB r13 r2
	JMPI LOOP_2
	NOP	
LOOP_2_EXIT:
	ADDI r13 1 
	STORE r14 r13
	SUB r13 r1
	ADDI r12 1
	JMPI LOOP_1 
SORTING_EXIT:
	NOP	
	MOV0 0
	MOVI r2 7
	MOVI r3 6
	JMPI MUL_BCD
	LOAD_PC r1
	MOV0 555
	HALT
	NOP
	NOP
	NOP 
	
	
	
	
	
	
MUL_BCD:



	MOVI r4 0 --MUL_BCD(r2 = a, r3 = b, r4 destroyed r1 = return) => r2:r3 = a * b
	MOVI r5 0
	ADDI r3 0 
MUL_BCD_LOOP_BEGIN:
	JMPEQ MUL_BCD_EXIT
	SUBI r3 1
	ADD r4 r2
	CMPI r4 10
	JMPN MUL_BCD_LOOP_BEGIN
	ADDI r3 0
	ADDI r5 1
	SUBI r4 10
	JMPI MUL_BCD_LOOP_BEGIN
	ADDI r3 0 
MUL_BCD_EXIT:
	MOV r2 r5
	MOV r3 r4
	JMP r1